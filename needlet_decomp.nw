% -*- mode: Noweb; noweb-code-mode: c-mode -*-

% This is a Noweb file describing and providing the implementation of
% a code for performing needlet analysis on maps. It takes as input a
% map in FITS format and produces a set of FITS maps, each containing
% one of the needlet components.
%
% Author: Maurizio Tomasi, 2011

\documentclass[a4paper,10pt,twoside]{article}
\usepackage{a4wide}
\usepackage{afterpage}
\usepackage{amsmath}
\usepackage{noweb}
\usepackage{fancyhdr}
\usepackage{url}
\usepackage{hyperref}
\usepackage{graphicx}
\usepackage{ccaption}
\usepackage{textcomp}
\usepackage{titlesec}
\usepackage{mathpazo}
\usepackage[round]{natbib}

\noweboptions{externalindex}

% Command used to indicate a section
\newcommand{\sectmark}{\S\ }

\titleformat{\section}[block]
  {\centering\normalfont\bfseries}
  {\sectmark\thesection.}{.5em}{}
\titleformat{\subsection}[runin]
  {\normalfont\bfseries}
  {\thesubsection.}{.5em}{}[. ]
\titleformat{\subsubsection}[runin]
  {\normalfont\bfseries}
  {}{.2em}{}[. ]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\pagestyle{fancy}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\sectionmark}[1]{%
  \markright{\thesection.\ #1}}
\fancyhf{}
\fancyhead[L,RO]{\bfseries\thepage}
\fancyhead[LO]{\bfseries\rightmark}
\fancyhead[RE]{\bfseries Needlet Analysis of Healpix Maps}

\fancypagestyle{plain}{%
  \fancyhf{}
  \fancyfoot[C]{\thepage}
  \renewcommand{\headrulewidth}{0pt}
  \renewcommand{\footrulewidth}{0pt}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\ud}{\mathrm{d}}

\captionnamefont{\small\bfseries}
\captiontitlefont{\small\itshape}

\hypersetup{pdftitle={Needlet Analysis of Healpix Maps},
pdfauthor=Maurizio Tomasi,
pdfsubject={Commented implementation of a C program to analyse Healpix Maps with needlets},
pdfkeywords={CMB {data analysis} {needlets} {Healpix} {harmonic analysis}},
pdfborder={0 0 0}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}

\bibliographystyle{plainnat}

\title{Needlet Analysis of Healpix Maps}
\author{M.~Tomasi}
\maketitle

\begin{abstract}
  In this document I describe the implementation of a C program which
  analyses FITS maps using needlet decomposition. It runs from the
  command line and accepts as input a FITS file containing the map to
  be analysed. The program outputs a set of maps, each representing
  one needlet component of the input map.

  The short introduction to the theory of the needlets I provide here
  follows closely the nice article by
  \citet{2008MarinucciNeedletsAndCMB}.
\end{abstract}

\tableofcontents

\section{Introduction}

\begin{figure}[tbf]
  \centering
  \includegraphics[width=\textwidth]{window-function-plot.pdf}
  \caption{\label{fig:windowFunction} Shape of
    $b\bigl(\ell/B^j\bigr)$, the so-called ``needlet window
    function'', for two values of $B$: the continuous line has $B =
    2.50$, while the dotted line has $B = 2.73$. The window function
    is to be multiplied by the $a_{\ell m}$ coefficients of a map to
    get its $j$-th needlet map. Since for every $j$ the window
    function is nonzero, it is clear that needlets pick only a limited
    subrange of the harmonic space. The parameter $B$ can be varied in
    order to broaden or sharpen the range of $\ell$ included in each
    map.}
\end{figure}
\afterpage{\clearpage}

In this document I implement a C program which performs needlet
analysis of sky maps. Needlets have been introduced by
\citet{2006NarcowichNeedlets} as a powerful tool for the analysis of
spherical random fields. They can be seen as the analogous of wavelets
over a $\mathbb{S}^n$ field ($n$-dimensional sphere), as they
implement a way of decomposing signals into a set of functions (called
``needlets'') which are well localized both in pixel and harmonic
space. The most important result in needlet theory is summed up by
\textit{Proposition 1} in \citet{2009BaldiNeedlets}, which states the
following facts:
\begin{enumerate}
\item Needlets implement a \emph{tight frame} over $\mathbb{S}^n$
  (i.e.\ a set of function which shares many properties with
  orthonormal bases, most notabily they preserve the norm of functions
  on $\mathbb{S}^n$);
\item Such frame is well localized both in the harmonic space (where
  it has compact support) and in the pixel space (where it vanishes
  faster than any polynomial).
\end{enumerate}
Such approach rotates around the definition of a so-called
\emph{window function} $b(\cdot)$ which is a weight to be used with
the harmonic coefficients $\bigl\{a_{\ell m}\bigr\}_{\ell m}$ of a map
to get its needlet transform, according to the following formula:
\begin{equation}
\label{eq:needletTransformation}
\beta_{jk} = \sqrt{\lambda_{jk}} \sum_\ell b\left(\frac\ell{B^j}\right)
\sum_{m=-\ell}^\ell a_{\ell m} Y_{\ell m} (\xi_{jk}),
\end{equation}
where $\beta_{jk}$ are the needlet coefficients, so that for any fixed
$j$ (which approximately gives the angular scale of the needlet) one
gets back a map where only the coefficients around $\ell/B^j$ have
been picked out. The set $\{\xi_{jk}\}$ is a set of \emph{cubature
  points}, and it is usually taken to be the center of each pixel in
an Healpix map. When working with Healpix maps, the $j$ index
conventionally refers to a given \texttt{NSIDE} parameter, while $k$
is the pixel number, running from 0 to $12 \times \mathtt{NSIDE}^2 -
1$. The $\lambda_{jk}$ parameter is the normalization coefficient of
the needlet and is equal to
\begin{equation}
\label{eq:pixelWeight}
\lambda_{jk} = \lambda_j = \frac{4\pi}{N_j}
\end{equation}
for Healpix maps with $N_j$ pixels
\citep{2010ScodellerMexicanNeedlets}.

An example of how the $b\bigl(\ell/B^j\bigr)$ function looks is
provided in fig.~\ref{fig:windowFunction}.

\subsection{General implementation of the program}

This program has been created using the ``Literate Programming''
approach to development advocated by \citet{KnuthLiterateProgramming}.
The [[noweb]]\ tool is required to create this documentation as well
as the source code of the program to be run.

In order to compile the program, you have to install the following
libraries on your system:
\begin{enumerate}
\item Healpix (and CFITSIO) -- note that version 2.15a will not work
  without a patch, you should use 2.20 or greater instead (at the time
  of writing, 2.20 is available via the SVN repository at
  Sourceforge);
\item The GNU Scientific Library (GSL).
\end{enumerate}
To compile the program, run the [[configure]]\ script. This script was
created using the GNU Autotools, and it tries to detect yout system's
configuration. Normally you should call [[configure]]\ without
parameters, but there is an exception. If you enabled OpenMP support
when you compiled Healpix (quite likely if you are working on a
multi-core system), then you should run [[configure]]\ with the
[[--with-openmp]] parameter.

The program accepts a number of parameters from the command line:
\begin{enumerate}
\item The name of a FITS file containing the map to be analysed;
\item The $B$ parameter used in eq.~\eqref{eq:needletTransformation},
  which gives a scale for the ``width'' of the needlets in the
  harmonic space;
\item The first and last index of the needlet component (i.e.\ map)
  to be produced as output, i.e.\ the maximum value for $j$ to be used
  in eq.~\eqref{eq:needletTransformation}.
\end{enumerate}
It accepts a number of switches as well; they are optional, but when
present they must precede the parameters:
\begin{table}[h]
  \centering
  \begin{tabular}{rp{10cm}}
  \texttt{-h}, \texttt{--help} & Print a list of the command-line
  parameters and switches and exit. \\
  \texttt{-v}, \texttt{--version} & Print the program's name and its
  version, then exit. \\
  \texttt{--no-alm} & Skip the creation of the FITS files containing
  the $a_{\ell m}$ coefficients. \\
  \texttt{--output FILE} & Specify the file name template to be used
  when writing needlet maps to disk. The placeholder \verb|%d| (with
  its derivatives like \verb|%03d|, which share the same syntax as
  the Posix [[printf]]\ command) will be substituted with the current
  value of $j$. \\
  \texttt{--alm-output FILE} & Specify the file name template to be used
  when writing needlet $a_{\ell m}$ spectra to disk. As for
  [[--output]], the user can use the placeholder \verb|%d|. \\
  \texttt{--mask FILE} & Specify the name of a FITS file containing a
  mask to be applied to the data. All those pixels in the input map
  that match zero pixels in the mask will be set to zero before
  computing the needlet transform.
  \end{tabular}
\end{table}

The following example shows a typical invocation of our program:
\begin{verbatim}
./needlet_decomp --no-alm --output "ndl-%02d.fits" input_map.fits 2.73 1 10
\end{verbatim}
This code will read [[input_map.fits]] and decompose it in ten needlet
maps ($j=1\ldots 10$) with $B = 2.73$. The maps (but not the $a_{\ell
  m}$ coefficients) are written in files numbered sequentially from 1:
[[ndl-01.fits]], [[ndl-02.fits]] and so on.

The skeleton of the program is the starting point for our
implementation:
<<main.cpp>>=
<<Header files>>

<<Global definitions>>
<<Function definitions>>

int main(int argc, char ** argv)
{
    if (argc == 1)
    {
	print_help(argv[0]);
	return 0;
    }

    <<Parse any optional command-line switch>>
    <<Parse command-line parameters>>
    <<Read the input map and compute its spherical transformation>>
    <<Perform the analysis and save the results>>

    return 0;
}
@ %def main

We immediately present here the list of header files to include, since
it is quite long (the most part of them come from the Healpix library,
which does not provide a global header file like [[fitsio.h]]\ for
CFITSIO to include every definition). The following files are from
the standard C++ library and are provided by the compiler:
<<Header files>>=
#include <stdlib.h>   // For `atoi' and `atof'
#include <stdio.h>
#include <string>
#include <vector>
@ 

We also need CFITSIO and a number of functions from the GNU Scientific
Library which are declared in the [[gsl_math.h]] header:
<<Header files>>=
#include <gsl/gsl_math.h>
#include <fitsio.h>
@ 

Next we include a set of files from Healpix. We need (1) functions to
deal with $a_{\ell m}$ coefficients, (2) functions to read and write
FITS maps, and (3) other general stuff to handle maps:
<<Header files>>=
#include <alm.h>
#include <alm_fitsio.h>
#include <alm_healpix_tools.h>
#include <datatypes.h>
#include <healpix_base.h>
#include <healpix_map.h>
#include <healpix_map_fitsio.h>
@ 

Finally, we include the two header files which come with this program.
The first one, [[config.h]], is generated by the AutoConf script
[[configure]], while the other one contains the definitions for a few
functions used to compute the value of needlets.
<<Header files>>=
#include <config.h> // Generated by "configure"
#include "needlets.hpp"
@ 

\subsection{Basic initialisation}

The input parameters accepted in the command line (see the previous
section) are kept in global variables:
<<Global definitions>>=
#define PROGRAM_NAME "needlet_decomp"

std::string input_file_name;
double b_parameter;
int j_min;
int j_max;
const char * map_file_name_template = "needlet-map-%03d.fits";
const char * alm_file_name_template = "needlet-alm-%03d.fits";
const char * mask_file_name = NULL;
int no_alm_flag = 0;  /* Whether to save a_lm maps */
@ %def input_file_name b_parameter j_min j_max map_file_name_template alm_file_name_template mask_file_name no_alm_flag

Such parameters are initialized by scanning the variables [[argc]]\
and [[argv]], which contain the number of arguments provided in the
command line and the arguments themselves. We must take into account
the possibility that some switches, introduced by [[-]]\ or [[--]]\
(e.g. [[--help]]), are present as well before the actual parameters.
The code which interprets them is pretty naive: should the number of
command-line switches grow larger, we would probably convert the code
to use the GNU [[getopt]]
library\footnote{\url{http://www.gnu.org/s/libc/manual/html_node/Getopt.html}},
or something similar.
<<Parse any optional command-line switch>>=
int cur_arg = 1;
while(argv[cur_arg][0] == '-')
{
    if(   strcmp(argv[cur_arg], "-h") == 0
       || strcmp(argv[cur_arg], "--help") == 0)
    {
	print_help(argv[0]);
	return 0;
    } else if (   strcmp(argv[cur_arg], "-v") == 0
	       || strcmp(argv[cur_arg], "--version") == 0)
    {
	print_version();
	return 0;
    } else if (strcmp(argv[cur_arg], "--no-alm") == 0)
    {
	no_alm_flag = 1;
    } else if (   strcmp(argv[cur_arg], "-o") == 0
	       || strcmp(argv[cur_arg], "--output") == 0)
    {
	map_file_name_template = argv[++cur_arg];
    } else if (   strcmp(argv[cur_arg], "-a") == 0
	       || strcmp(argv[cur_arg], "--alm-output") == 0)
    {
	alm_file_name_template = argv[++cur_arg];
    } else if (   strcmp(argv[cur_arg], "-m") == 0
	       || strcmp(argv[cur_arg], "--mask") == 0)
    {
	mask_file_name = argv[++cur_arg];
    } else {
	fprintf(stderr, PROGRAM_NAME ": unrecognized switch `%s'\n",
		argv[cur_arg]);
	return 1;
    }

    ++cur_arg;
}
@

After having successfully parsed the command-line switches, we must
read the actual parameters needed by the program, namely (1) the name
of the FITS file containing the map, (2) the value of the $B$
parameter, (3) the minimum and maximum value of $j$:
<<Parse command-line parameters>>=
if (argc - cur_arg != 4)
{
    print_help(argv[0]);
    return 1;
}

input_file_name = argv[cur_arg++];

if ((b_parameter = atof(argv[cur_arg++])) <= 0.0)
{
    fputs(PROGRAM_NAME ": the B parameter must be a positive number\n", stderr);
    return 1;
}

if (   (j_min = atoi(argv[cur_arg])) < 0
    || (j_max = atoi(argv[cur_arg + 1])) < 0)
{
    fputs(PROGRAM_NAME ": the number of components must be positive\n", stderr);
    return 1;
}
@ 

We still have to define [[print_help]]\ and [[print_version]]:
<<Function definitions>>=
void
print_help(const char * argv0)
{
    printf("Usage: %s [OPTIONS] MAP_FILE B_PARAM MIN_J MAX_J\n\
\n\
Read a FITS file containing a Healpix map and decompose it in its\n\
needlet components from MIN_J to MAX_J. B_PARAM is a floating-point\n\
positive value specifying the shape of the needlet. Possible\n\
OPTIONS are:\n\
\n\
   -h, --help             Print this help and exit.\n\
   -v, --version          Print version information on stdout and exit.\n\
   --no-alm               Do not save a_lm coefficients in FITS files.\n\
   -o, --output FILE      Specify a template for needlet map file names.\n\
                          You can use *one* instance of `%%d' (or similar,\n\
                          as accepted by the Posix `printf' command) as a\n\
                          placeholder for the value of j, e.g. \n\
                          \"needlet-%%03d.fits\".\n\
   -a, --alm-output FILE  Specify a template for a_lm file names. The\n\
                          same said for `-o' appies here as well.\n\
   -m, --mask FILE        Specify the name of a FITS file that contains\n\
                          a mask to be applied to the input map. All the\n\
                          pixels in the input map that match a zero pixel in\n\
                          the mask shall be set to zero before the analysis.\n\
\n\
Report bugs to <" PACKAGE_BUGREPORT ">\n", argv0);
}

void
print_version(void)
{
    puts(PACKAGE_STRING " - compute needlet transforms of Healpix maps");
}
@ %def print_help print_version


\subsection{Reading the input map}

To read the Healpix map I use the [[read_Healpix_map_from_fits]]\
function, which is provided by the [[Healpix_cxx]]\ package.
Unfortunately the documentation for the library does not go very deep
in details and does not explain how to catch error conditions.
Therefore, the code does not perform any error checking here. Since we
are going to do a spherical transformation on the map, and Healpix
requires maps to be stored using ring order for this transformation to
be applied, we apply [[swap_scheme]] if needed. (Note that the default
output of Madam 3.6 and above is to write map in nested order.) We
need also to take care of bad pixels and of the presence of a mask
(through the [[--mask]]\ command-line switch), but we leave such
discussion to sect.~\ref{sec:maskBuilding}:
<<Read the input map and compute its spherical transformation>>=
Healpix_Map<double> input_map;
fprintf(stderr, PROGRAM_NAME ": reading map %s\n", input_file_name.c_str());
read_Healpix_map_from_fits(input_file_name, input_map);
if(input_map.Scheme() != RING)
{
    fputs(PROGRAM_NAME ": converting map into RING scheme\n", stderr);
    input_map.swap_scheme();
}
fputs(PROGRAM_NAME ": map read into memory\n", stderr);

<<Build a mask>>
<<Mask [[input_map]]>>
@ %def input_map

To calculate the $a_{\ell m}$ coefficients we use [[map2alm]]. One of
the function parameters is a set of weights for each ring; as we do
not use this feature, we create a double array ([[ring_weights]]) large
enough and set every element to 1 (the value suggested by the Healpix
documentation for [[map2alm]] when no weighting is wanted):
<<Read the input map and compute its spherical transformation>>=
unsigned int l_max = 3 * input_map.Nside() - 1;
unsigned int m_max = l_max;

Alm<xcomplex<double> > input_alm(l_max, m_max);
arr<double> ring_weights(2 * input_map.Nside());
for (size_t i = 0; i < ring_weights.size(); ++i)
    ring_weights[i] = 1.0;

fputs(PROGRAM_NAME ": decomposing the map into its spherical harmonics...\n",
      stderr);
map2alm_iter(input_map, input_alm, 5, ring_weights);
fputs("...done\n", stderr);
@ %def input_alm


\subsection{Building a mask}
\label{sec:maskBuilding}

It is possible to specify a mask to be applied to the input map before
computing its needlet transform. It is seldom necessary to use masks
for doing needlet analysis, as the localisation properties of this
kind of transform makes the presence of a mask of little significance
(apart from fringles that appear at the borders of the mask,
expecially for low values of $j$). A possible application of masks is
when you plan to compare two needlet maps and you want to be sure that
they cover the same portion of the sky: in this case, applying a mask
will help in the comparison.

As above we use here [[read_Healpix_map_from_fits]]\ to read the map,
and we do not check for errors. If the user has not specified a mask
(via the [[--mask]]\ command-line flag), a mask containing only ones
will be created in memory:
<<Build a mask>>=
Healpix_Map<int> mask;
if (mask_file_name != NULL)
{
    fprintf(stderr, PROGRAM_NAME ": reading mask map %s\n", mask_file_name);
    read_Healpix_map_from_fits(mask_file_name, mask);
    if(mask.Scheme() != RING)
    {
	fputs(PROGRAM_NAME ": converting mask into RING scheme\n", stderr);
	mask.swap_scheme();
    }
} else
{
    mask.SetNside(input_map.Nside(), input_map.Scheme());
    mask.fill(1);
}
@ %def mask

Once the mask has been built, we set to zero any pixel in
[[input_map]]\ which is either (1) not a number, (2) flagged as
``bad'' or (3) whose corresponding pixel in [[mask]]\ is [[false]]:
<<Mask [[input_map]]>>=
unsigned long num_of_flagged_pixels = 0;
arr<double> map_pixels = input_map.Map();
for (unsigned long i = 0; i < map_pixels.size(); ++i)
{
    if (map_pixels[i] < -1.6e+30
        || (! gsl_finite(map_pixels[i]))
        || (! mask[i]))
    {
	map_pixels[i] = 0.0;
	num_of_flagged_pixels++;
    }
}
if (num_of_flagged_pixels > 0)
    fprintf(stderr, PROGRAM_NAME ": %lu pixels were flagged and set to zero\n",
		 num_of_flagged_pixels);

input_map.Set(map_pixels, input_map.Scheme());
@ 

\subsection{Application of the needlet transformation}

At this point the code is ready to apply the needlet transformations
on the map. I have chosen to postpone the details about how to
calculate the window function and to filter the coefficients to
sect.~\ref{sec:needletCalculation}, in order to keep the pace in
explaining the outline of the main program. The only thing to know
here is that the window function is calculated by [[window_function]]\
and uses a [[needlet_t]]\ object as a cache to speed up computations.
It also requires a vector containing the values of $\ell$ where to
compute $b$: this is the purpose of [[ang_scales]].
<<Perform the analysis and save the results>>=
arr<double> ang_scales(l_max + 1);
for (unsigned int l = 0; l <= l_max; ++l)
    ang_scales[l] = l;

needlet_t * needlet = needlet_init(b_parameter, input_map.Nside());
@ %def ang_scales needlet

The loop over the values of $j$ is rather uninteresting. The code uses
[[Alm::ScaleL]] to scale all the $a_{\ell m}$ coefficients of
[[output_alm]] (which has been initialized with the coefficients of
the input map) with the window function stored in [[filter]]. Note
that we prepend [[!]] to the name of the FITS file when saving the
map: in this way we get rid of the annoying error messages produced by
CFITSIO every time the programmer wants to overwrite an existing file.
<<Perform the analysis and save the results>>=
for(int j = j_min; j <= j_max; ++j)
{
    fprintf(stderr, PROGRAM_NAME ": processing j = %d\n", j);

    arr<double> filter(l_max + 1);
    Alm<xcomplex<double> > output_alm;
    output_alm = input_alm;

    fputs(PROGRAM_NAME ":    estimating the window function\n", stderr);
    window_function(needlet, j, l_max + 1,
		    ang_scales.begin(), filter.begin());

    fputs(PROGRAM_NAME ":    filtering the alm coefficients\n", stderr);
    output_alm.ScaleL(filter);

    if (! no_alm_flag)
    {
	char * alm_file_name;
	asprintf(&alm_file_name, alm_file_name_template, j);
	write_Alm_to_fits(std::string("!") + alm_file_name,
			  output_alm, l_max, m_max, PLANCK_FLOAT64);
	fprintf(stderr, PROGRAM_NAME ":    file %s written to disk\n",
		alm_file_name);
    }

    Healpix_Map<double> output_map(input_map.Nside(), RING, SET_NSIDE);
    fputs(PROGRAM_NAME ":    converting the coefficients into a map\n",
	  stderr);
    alm2map(output_alm, output_map);

    char * map_file_name;
    asprintf(&map_file_name, map_file_name_template, j);
    write_Healpix_map_to_fits(std::string("!") + map_file_name,
                              output_map, PLANCK_FLOAT64);
    fprintf(stderr, PROGRAM_NAME ":    file %s written to disk\n",
	    map_file_name);
}
needlet_free(needlet);
@


\section{Needlet calculation}
\label{sec:needletCalculation}

We are going to implement needlet functions in a separate file, so
that they can be easily used in other projects as well. The structure
of the file is the following:
<<needlets.cpp>>=
#include "needlets.hpp"
#include <gsl/gsl_math.h>
#include <gsl/gsl_spline.h>

<<Global definitions for [[needlets.cpp]]>>
<<Static functions only used by [[needlets.cpp]]>>
<<Exported needlet functions>>
@ so that we stress that only a fraction of the functions defined in
this module will be visible outside. The header file associated with
[[needlets.cpp]] is provided here:
<<needlets.hpp>>=
#ifndef NEEDLETS_HPP
#define NEEDLETS_HPP

#include <stddef.h>  /* For size_t */

typedef struct __needlet_t needlet_t;

needlet_t * needlet_init(double b_param, unsigned int nside);
void needlet_free(needlet_t *);

void window_function (needlet_t * needlet,
                      int j,
                      size_t size,
                      const double * ang_scales,
                      double * result);

#endif
@ As you can see, apart from two utility functions [[needlet_init]]\
and [[needlet_free]]\ (which we shall cover later), the only exported
function is [[window_function]], which gives the weights of the
harmonic coefficients that realize the needlet transform. In the next
paragraphs we shall explain the purpose of such function and provide
its full implementation.


\subsection{The basic theory of standard needlets}

Standard needlets are discussed by
\citet{2008MarinucciNeedletsAndCMB}, which provides a practical recipe
to build the window function $b(\cdot)$ in
eq.~\eqref{eq:needletTransformation}. Unfortunately, $b(\cdot)$ is
built using a non-analytic function and its numerical estimation
requires the calculation of non-algebraic integrals. It therefore
complicates any numerical implementation of the needlet concept.

First of all, let us recall the steps required to build the window function
$b(\cdot)$, while at the same time underlying any numerical issue each step
might pose:
\begin{enumerate}
\item Define
\begin{equation}
f(t) := \begin{cases}
\exp \left(-\frac{1}{1 - t^2}\right), & t \in [-1, 1], \\
0, & \text{otherwise}.
\end{cases}
\end{equation}
Note that $f$ is $C^\infty$, but it is not analytic around points $t = \pm 1$,
because $f^{(n)} (\pm 1) = 0\ \forall n$. Therefore, such function cannot be
approximated easily using Taylor series\footnote{The usage of
Pad\'e\ approximants reduces the problem while however not completely curing it
(tests were made up to the approximant $[15/13]_f (t)$ built around points $t =
0$ and $t = \pm \frac12$).} over the interval $[-1, 1]$.

\item Define
\begin{equation}
\label{eq:psi}
\psi (u) := \frac{\int_{-1}^u f(t)\,\ud t}{\int_{-1}^1 f(t)\,\ud t}.
\end{equation}
The fact that $\psi \in C^\infty$ derives from the same property for $f$. Such
function requires the evaluation of an integral which has no algebraic form.
Therefore, numerical integration algorithms must be implemented. The
denominator has the following value (truncated to 18 digits):
\begin{equation}
K := \int_{-1}^1 f(t)\,\ud t = 0.443\,993\,816\,168\,079\,438.
\end{equation}

\item Define
\begin{equation}
\label{eq:phi}
\varphi_B (t) := \begin{cases}
1, & t \in \left[0, \frac1B\right], \\
\psi\left(1 - \frac{2B}{B-1} \left(t - \frac1B\right)\right), & t \in
\left(\frac1B, 1\right), \\ 0, & t > 1.
\end{cases}
\end{equation}
for $B > 0$.

\item Define the window function $b (\cdot)$ such that
\begin{equation}
\label{eq:b}
b (\xi) := \sqrt{\varphi_B \left(\frac{\xi}B\right) - \varphi_B(\xi)}.
\end{equation}
\end{enumerate}


\subsection{Implementation of the needlet functions}

Unlike \citet{2010PietrobonNeedATool}, which perform a numerical
integration to calculate the integrals in eq.~\ref{eq:psi}, my code
interpolates values calculated numerically with Wolfram Mathematica
6.0.3.0 using a spline approximation. Such approach allows to get a
much better accuracy in constant computation time.

Taking advantage of the simmetry of $\psi$ around $(0, 1/2)$, I used
the following code to make Mathematica evaluate $\psi$ in a number of
points within the $[-1, 0]$ range (the step was 0.02):
\begin{verbatim}
f[t_] := If[Abs[t] < 1, Exp[-(1/(1 - t^2))], 0];
psi[u_] := Integrate[f[t], {t, -1, u}]/Integrate[f[t], {t, -1, 1}];
lValues = Range[-1 - 1/100, 1/100, 1/100];
needletLPoints = N[lValues];
needletPhiPoints = N[psi /@ lValues, 16];
\end{verbatim}
Note that we round the values in [[needletPhiPoints]] to 16 digits,
which is the typical precision for 8-byte floating point numbers. The
values in [[needletPhiPoints]] are converted in a format ingestible by
the C compiler and used to define the static global variable
[[needlet_phi_points]]:
<<Global definitions for [[needlets.cpp]]>>=
static const double needlet_l_points[] = {
   -1.01,-1.,-0.99,-0.98,-0.97,-0.96,-0.95,-0.94,-0.93,-0.92,-0.91,
   -0.9,-0.89,-0.88,-0.87,-0.86,-0.85,-0.84,-0.83,-0.82,-0.81,-0.8,-0.79,
   -0.78,-0.77,-0.76,-0.75,-0.74,-0.73,-0.72,-0.71,-0.7,-0.69,-0.68,
   -0.67,-0.66,-0.65,-0.64,-0.63,-0.62,-0.61,-0.6,-0.59,-0.58,-0.57,
   -0.56,-0.55,-0.54,-0.53,-0.52,-0.51,-0.5,-0.49,-0.48,-0.47,-0.46,
   -0.45,-0.44,-0.43,-0.42,-0.41,-0.4,-0.39,-0.38,-0.37,-0.36,-0.35,
   -0.34,-0.33,-0.32,-0.31,-0.3,-0.29,-0.28,-0.27,-0.26,-0.25,-0.24,
   -0.23,-0.22,-0.21,-0.2,-0.19,-0.18,-0.17,-0.16,-0.15,-0.14,-0.13,
   -0.12,-0.11,-0.1,-0.09,-0.08,-0.07,-0.06,-0.05,-0.04,-0.03,-0.02,
   -0.01,0.,0.01
};
static const double needlet_phi_points[] = {
0,0,6.502743904184239e-26,1.804735934292834e-14,
   1.631468853713497e-10,1.810113957105095e-8,3.339417624783784e-7,
   2.471150140069252e-6,0.00001075015854374423,0.00003336351373616104,
   0.00008236387786715602,0.0001727858298059248,0.0003214113575207205,
   0.0005455739393754458,0.0008621964816387603,0.001287113013132387,
   0.001834648460891867,0.002517402994959833,0.003346184787030743,
   0.004330042963612801,0.005476363319604365,0.006790999529434621,
   0.008278420938907964,0.009941864377262811,0.01178348204478926,
   0.01380448076780671,0.01600525011559473,0.01838547832968979,
   0.02094425594602818,0.02368016755829782,0.02659137249414124,
   0.02967567533735547,0.03293058728637641,0.03635337933135141,
   0.03994112818543715,0.04369075583815134,0.04759906352107971,
   0.05166276079624053,0.05587849039937629,0.06024284939693679,
   0.06475240714787172,0.06940372050010411,0.07419334659675309,
   0.07911785361856135,0.08417382974614265,0.08935789058809582,
   0.09466668528821007,0.1000969014963931,0.1056452693630967,
   0.1113085646954417,0.1170836113945422,0.1229672832773291,
   0.1289565053721521,0.1350482547653029,0.1412395610651023,
   0.1475275065411121,0.1539092259881733,0.1603819063581696,
   0.1669427861965335,0.1735891549154128,0.1803183519310082,
   0.1871277656887677,0.1940148325968177,0.200977035885137,
   0.2080119044054996,0.215117011385051,0.2222899731445174,
   0.2295284477904239,0.236830133889294,0.2441927691305803,
   0.2516141289840201,0.259092025356192,0.2666243052502535,
   0.2742088494321481,0.2818435711059751,0.2895264146006935,
   0.2972553540698853,0.3050283922059126,0.3128435589694673,
   0.320698910335222,0.3285925270540376,0.3365225134319684,
   0.3444869961261173,0.3524841229572322,0.3605120617387989,
   0.3685689991222625,0.376653139457912,0.3847627036708732,
   0.3928959281515799,0.4010510636600322,0.4092263742430952,
   0.4174201361640454,0.4256306368435351,0.4338561738111108,
   0.4420950536663959,0.4503455910490235,0.458606107616387,
   0.4668749310282625,0.4751503939373393,0.4834308329846915,
   0.4917145877992081,0.5,0.5082854122007919 };
static const size_t num_of_needlet_phi_points =
    sizeof(needlet_phi_points) / sizeof(needlet_phi_points[0]);
@ %def needlet_l_points needlet_phi_points num_of_needlet_phi_points
(Note that I have sampled an interval slightly larger than $[-1, 0]$.)

To do the spline interpolation, my code uses the [[gsl_spline_eval]]\
function implemented by the GNU Scientific Library (GSL for short). A
nice characteristic of [[gsl_spline_eval]]\ is the ability to use an
``interpolation accelerator''. Every time [[gsl_spline_eval]] is
called for some point $u \in [-1, 0]$, it must search in
[[needlet_phi_points]]\ for three elements $\psi(u_{j-1}), \psi(u_j),
\psi(u_{j+1})$ with $u_j$ being the closest to $u$. Such search can be
speed up using a cache that allows to quickly find the three sample
points. This is one of the reasons why [[needlet.hpp]]\ referenced an
anonymous structure [[needlet_t]]: because the codde needs to keep a
pointer to the spline ([[gsl_spline]]) and to the cache
([[gsl_interp_accel]]):
<<Global definitions for [[needlets.cpp]]>>=
struct __needlet_t {
    double             b_param;
    unsigned int       nside;
    gsl_interp_accel * acc;
    gsl_spline       * spline;
};
@ %def __needlet_t
Field [[b_param]] contains the value of $B$ (see
eq.~\ref{eq:needletTransformation}) and field [[nside]]\ contains the
value of NSIDE for the final map (used to compute the pixel weights,
see eq.~\ref{eq:pixelWeight}). Note that we already declared a
[[typedef]] to [[needlet_t]] for this structure in [[needlet.hpp]]:
therefore, any C program including the header file will see
[[needlet_t]] as an opaque structure.

The function that creates a new [[needlet_t]] object is [[needlet_init]]:
<<Exported needlet functions>>=
needlet_t *
needlet_init(double b_param, unsigned int nside)
{
    needlet_t * needlet;

    needlet = (needlet_t *) malloc(sizeof (needlet_t));
    needlet->b_param = b_param;
    needlet->nside   = nside;
    needlet->acc     = gsl_interp_accel_alloc();
    needlet->spline  = gsl_spline_alloc(gsl_interp_cspline,
                                        num_of_needlet_phi_points);

    gsl_spline_init(needlet->spline,
                    needlet_l_points,
 		    needlet_phi_points,
                    num_of_needlet_phi_points);
    return needlet;
}
@ %def needlet_init
Of course we also need a function which disposes existing needlets:
<<Exported needlet functions>>=
void
needlet_free(needlet_t * needlet)
{
    if (needlet == NULL)
        return;

    gsl_spline_free(needlet->spline);
    gsl_interp_accel_free(needlet->acc);
    free(needlet);
}
@ %def needlet_free

The next function to be defined is [[psi]] (eq.~\ref{eq:psi}). As I
have anticipated above when defining [[needlet_phi_points]], its
implementation relies on the fact that the function is symmetric with
respect to point $(0, 1/2)$ and the spline is defined only in the
$(-1,0)$ boundary. Since there is little use of [[psi]]\ outside
[[needlets.cpp]], I have hidden this function to the outside using
[[static]].
<<Static functions only used by [[needlets.cpp]]>>=
static double
psi(needlet_t * needlet,
    double u)
{
    if (u <= -1.0)
        return 0;
    else if (u >= 1.0)
        return 1.0;
    else
    {
        double neg_u = -fabs(u);
        double spline = gsl_spline_eval(needlet->spline,
                                        neg_u,
					needlet->acc);
	return (u > 0.0) ? (1 - spline) : spline;
    }
}
@ %def psi

The next function is $\varphi_B$, the composition of $\psi$ and $1 -
2B (t-1/B) / (B + 1)$. The implementation of [[phi]] requires the
following arguments: (1) a pointer to a [[needlet_t]] structure which
defines the spline for $\psi$, (2) the value of the $2B/(B - 1)$ as
appears in eq.~\eqref{eq:phi} (stored in [[factor]]), (3) the value of
the $1/B$ parameter, (4) the point $t$ where to calculate $\varphi_B$:
<<Static functions only used by [[needlets.cpp]]>>=
static double
phi(needlet_t * needlet,
    double factor,
    double b_inv,
    double t)
{
    return psi(needlet, 1 - factor * (t - b_inv));
}
@ %def phi
It is not computationally expensive to separate the definition of
[[phi]]\ from the definition of [[psi]]: any decent C++ compiler will
short circuit the definition of [[phi]].

Now I am going to implement [[window_function]], the function that
estimates the value of $b(\ell/B^j\cdot)$ in
eq.~\eqref{eq:needletTransformation}. Unlike [[psi]]\ and [[phi]]\, it
accepts a vector of values where to compute the window function
([[values]]\ is the set of $\ell_i$ for which $b_B(\ell_i)$ must be
calculated, with $i = 0\ldots$[[size-1]]). The constant
[[pixel_weight]] is equal to $\sqrt{\lambda_j}$, which is defined in
eq.~\eqref{eq:pixelWeight}:
\[
\sqrt{\lambda_j} = \sqrt{\frac{4\pi}{N_j}}
  = \sqrt{\frac{4\pi}{12 N_\mathrm{side}^2}}
 = \frac{\sqrt\pi}{\sqrt 3\,N_\mathrm{side}}.
\]
If [[nside]] is set to zero, the weight is set to 1. When $\varphi_B$
is calculated at points very near $1$, it can happen that the
difference $\varphi(\ell/B^{j+1}) - \varphi(\ell/B^j)$ is a negative
number very close to zero. In this case calculating the square root
would lead to a [[NaN]]: the code prevents such possibility by
arbitrarly rounding the difference [[diff]] to zero.
<<Exported needlet functions>>=
void
window_function (needlet_t * needlet,
                 int j,
                 size_t size,
                 const double * ang_scales,
                 double * result)
{
    const double b_inv  = 1 / needlet->b_param;
    const double factor = 2 * needlet->b_param / (needlet->b_param - 1);
    const double b_inv_to_j = gsl_pow_int(b_inv, j);
    double pixel_weight;

    if(needlet->nside > 0) 
        pixel_weight = M_SQRTPI / (M_SQRT3 * needlet->nside);
    else
        pixel_weight = 1.0;

    for (size_t i = 0; i < size; ++i)
    {
        const double l_over_b_to_j = ang_scales[i] * b_inv_to_j;
	const double diff = phi(needlet, factor, b_inv, l_over_b_to_j * b_inv) -
                            phi(needlet, factor, b_inv, l_over_b_to_j);
        if (diff > 0.0)
            result[i] = sqrt(diff) * pixel_weight;
	else
            result[i] = 0.0;
    }
}
@ %def window_function


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\appendix

\section{Index of symbols}

Here we provide a list of the symbols used in the code. Each reference is of
the form \texttt{nL}, where \texttt{n} is the number of the page and \texttt{L}
a letter specifying the code chunk within that page starting from ``a''.
Underlined references point to the definition of the symbol.

\nowebindex

\bibliography{needlet_decomp}
\end{document}
